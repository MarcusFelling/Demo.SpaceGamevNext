name: pipeline
on: [push]
 # environments: https://github.com/mickeygousset/youtube-demos/blob/main/.github/workflows/simple-manual-workflow-three-env.yml
env:
  APPNAME: spacegamevnext
  REGISTRYSKU: 'Standard'
  REGISTRYNAME: 'marcusfellingspacegamevnextacr'
  IMAGENAME: 'spacegamevnext'
  LOCATION: 'WestUS'
  SKU: 'S1'
  DEVENV: 'true'
  BUILDCONFIGURATION: Release
  DOTNETSDKVERSION: 5.0.103

  # WWROOTDIR: '${{ env.APPLICATIONPATH }}/wwwroot'
  # SITE_URL: 'https://${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-${{ env.APPID }}.azurewebsites.net'

jobs:
  build:
    name: Build and push application to ACR
    runs-on: ubuntu-latest  
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1 
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build app and run unit tests 
      run: | 
            dotnet restore
            dotnet build --configuration ${{ env.BUILDCONFIGURATION }}
            dotnet test UnitTests/UnitTests.csproj  --verbosity normal

    # Ensure Bicep template transpile successfully
    - name: Bicep build
      run: | 
        az bicep build --files IaC/main.bicep

    - name: Create Azure container registry using Bicep
      run: >
        az deployment group create \
          --resource-group '${{ env.APPNAME }}-ACR-rg' \
          --template-file IaC/registry.bicep \
          --parameters registry='${{ env.REGISTRYNAME }}' \
                       registrySku='${{ env. REGISTRYSKU }}'        

    - name: Fetch ACR credentials
      id: acrCredentials
      continue-on-error: false
      run: |
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"

    - name: ACR authentication
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRYNAME }}.azurecr.io
        username: ${{ steps.acrCredentials.outputs.acr_username }}
        password: ${{ steps.acrCredentials.outputs.acr_password }}

    - name: Docker Build & Push to ACR
      run: |
        docker login ${{ env.REGISTRYNAME }}.azurecr.io --username ${{ steps.acrCredentials.outputs.acr_username }} --password ${{ steps.acrCredentials.outputs.acr_password }}
        docker build "$GITHUB_WORKSPACE" -f  "Dockerfile" -t ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}  

  deploy:
    name: Deploy infrastructure and application
    env: 
      ENVIRONMENTNAME: dev
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Extract branch name to append to app name
      run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')" >> $GITHUB_ENV

    - name: Deploy infrastructure using Bicep
      run: >
        az deployment sub create \
          --location '${{ env.LOCATION }}' \
          --template-file IaC/main.bicep \
          --parameters resourceGroupName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-rg' \
                       acrResourceGroupName='${{ env.APPNAME }}-ACR-rg' \
                       appServiceName='${{ env.APPNAME }}-${{ env.BRANCH_NAME }}' \
                       servicePlanName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-plan' \
                       appSku='${{ env.SKU }}' \
                       registryName='${{ env.REGISTRYNAME }}' \
                       imageName='${{ env.IMAGENAME }}' \
                       registrySku='${{ env.REGISTRYSKU }}' \
                       sqlServerName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-sql' \
                       dbName='${{ env.APPNAME }}database' \
                       dbUserName='${{ secrets.DBUSERNAME }}' \
                       dbPassword='${{ secrets.DBPASSWORD }}' \
                       devEnv='${{ env.DEVENV }}'

    - name: Get ACR credentials
      id: getACRCred
      run: |
           echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
           echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
           echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`" 

    - name: 'Deploy to Azure Web App for Containers'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: '${{ env.APPNAME }}-${{ env.BRANCH_NAME }}'
        images: ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}

  FunctionalTests:
    name: Functional tests
    env: 
      ENVIRONMENTNAME: dev     
    runs-on: windows-latest
    needs: deploy
    steps:
    - uses: actions/checkout@master

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Update web app url in Run Settings
      shell: powershell
      run: |
          cd FunctionalTests
          [xml]$runSetting = Get-Content functionalTests.runsettings
          $runSetting.RunSettings.TestRunParameters.ChildNodes.Item(0).value = 'https://${{ env.APPNAME }}-${{ env.BRANCH_NAME }}.azurewebsites.net/'
          $runSetting.Save("$(pwd)/functionalTests.runsettings")

    - name: Run tests
      continue-on-error: false
      run: |
          cd FunctionalTests
          dotnet test FunctionalTests.csproj -s functionalTests.runsettings
