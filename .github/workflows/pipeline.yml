name: pipeline
on: [push, workflow_dispatch]
 # environments: https://github.com/mickeygousset/youtube-demos/blob/main/.github/workflows/simple-manual-workflow-three-env.yml
env:
  APPNAME: spacegamevnext
  REGISTRYSKU: 'Standard'
  REGISTRYNAME: 'marcusfellingspacegamevnextacr'
  IMAGENAME: 'spacegamevnext'
  LOCATION: 'WestUS'
  SKU: 'S1'
  DEVENV: true
  BUILDCONFIGURATION: Release
  DOTNETSDKVERSION: 5.0.103

jobs:
  buildApp:
    name: Build - App
    runs-on: ubuntu-latest  
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1 
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build app and run unit tests 
      run: | 
            dotnet restore WebApp/WebApp.csproj
            dotnet restore UnitTests/UnitTests.csproj
            dotnet build WebApp/WebApp.csproj --configuration ${{ env.BUILDCONFIGURATION }}
            dotnet build UnitTests/UnitTests.csproj --configuration ${{ env.BUILDCONFIGURATION }}
            dotnet test UnitTests/UnitTests.csproj --verbosity normal

    - name: Create Azure container registry using Bicep
      run: >
        az deployment group create \
          --resource-group '${{ env.APPNAME }}-ACR-rg' \
          --template-file IaC/registry.bicep \
          --parameters registry='${{ env.REGISTRYNAME }}' \
                       registrySku='${{ env. REGISTRYSKU }}'        

    - name: Fetch ACR credentials
      id: acrCredentials
      continue-on-error: false
      run: |
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"

    - name: ACR authentication
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRYNAME }}.azurecr.io
        username: ${{ steps.acrCredentials.outputs.acr_username }}
        password: ${{ steps.acrCredentials.outputs.acr_password }}

    - name: Docker Build & Push to ACR
      run: |
        docker login ${{ env.REGISTRYNAME }}.azurecr.io --username ${{ steps.acrCredentials.outputs.acr_username }} --password ${{ steps.acrCredentials.outputs.acr_password }}
        docker build "$GITHUB_WORKSPACE" -f  "Dockerfile" -t ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }} 
        docker push ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}   

  buildDatabase:
    name: Build - Database
    runs-on: windows-latest  
    steps:
    - uses: actions/checkout@master
    
    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v1
    
    - name: Use MSBuild to build db project
      run: MSBuild.exe Database/Database.sqlproj
    
    - name: Upload dacpac as artifact    
      uses: actions/upload-artifact@v2
      with:
        name: dacpac
        path: Database/bin/Debug/Database.dacpac

  buildIaC:
    name: Build - Infrastructure
    runs-on: ubuntu-latest  
    steps:
    - uses: actions/checkout@master
    - name: Bicep build
      run: | 
        az bicep build --files IaC/main.bicep    

  deployDev:
    name: Deploy - dev
    environment: dev
    env:
      ENVIRONMENTNAME: dev
    needs: [buildApp, buildDatabase, buildIaC]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Extract branch name to append to app name
      run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')" >> $GITHUB_ENV

    - name: Preview infrastructure changes
      run: >
        az deployment sub what-if \
          --name 'spacegamedeploy-${{ env.ENVIRONMENTNAME }}' \
          --location '${{ env.LOCATION }}' \
          --template-file IaC/main.bicep \
          --parameters resourceGroupName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-rg' \
                       acrResourceGroupName='${{ env.APPNAME }}-ACR-rg' \
                       appServiceName='${{ env.APPNAME }}-${{ env.BRANCH_NAME }}' \
                       servicePlanName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-plan' \
                       appSku='${{ env.SKU }}' \
                       registryName='${{ env.REGISTRYNAME }}' \
                       imageName='${{ env.IMAGENAME }}' \
                       tag='${{ github.sha }}' \
                       registrySku='${{ env.REGISTRYSKU }}' \
                       sqlServerName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-sql' \
                       dbName='${{ env.APPNAME }}database' \
                       dbUserName='${{ secrets.DBUSERNAME }}' \
                       dbPassword='${{ secrets.DBPASSWORD }}' \
                       devEnv='${{ env.DEVENV }}'

    - name: Deploy infrastructure
      run: >
        az deployment sub create \
          --name 'spacegamedeploy-${{ env.ENVIRONMENTNAME }}' \
          --location '${{ env.LOCATION }}' \
          --template-file IaC/main.bicep \
          --parameters resourceGroupName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-rg' \
                       acrResourceGroupName='${{ env.APPNAME }}-ACR-rg' \
                       appServiceName='${{ env.APPNAME }}-${{ env.BRANCH_NAME }}' \
                       servicePlanName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-plan' \
                       appSku='${{ env.SKU }}' \
                       registryName='${{ env.REGISTRYNAME }}' \
                       imageName='${{ env.IMAGENAME }}' \
                       tag='${{ github.sha }}' \
                       registrySku='${{ env.REGISTRYSKU }}' \
                       sqlServerName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-sql' \
                       dbName='${{ env.APPNAME }}database' \
                       dbUserName='${{ secrets.DBUSERNAME }}' \
                       dbPassword='${{ secrets.DBPASSWORD }}' \
                       devEnv='${{ env.DEVENV }}'

    - name: Get ACR credentials
      id: getACRCred
      run: |
           echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
           echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
           echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`" 

    - name: 'Deploy to Azure Web App for Containers'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: '${{ env.APPNAME }}-${{ env.BRANCH_NAME }}'
        images: ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}

    - name: Add PR comment with site url
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GHTOKEN }}
        script: |
          const comment = `Your changes are ready for testing: https://${{ env.APPNAME }}-${{ env.BRANCH_NAME }}.azurewebsites.net`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          })

  deployTest:
    name: Deploy - test
    runs-on: ubuntu-latest
    environment: test
    env:
      ENVIRONMENTNAME: test
      DEVENV: false
    needs: [buildApp, buildDatabase, buildIaC]
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy infrastructure
      run: >
        az deployment sub create \
          --name 'spacegamedeploy-${{ env.ENVIRONMENTNAME }}' \
          --location '${{ env.LOCATION }}' \
          --template-file IaC/main.bicep \
          --parameters resourceGroupName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-rg' \
                       acrResourceGroupName='${{ env.APPNAME }}-ACR-rg' \
                       appServiceName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}' \
                       servicePlanName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-plan' \
                       appSku='${{ env.SKU }}' \
                       registryName='${{ env.REGISTRYNAME }}' \
                       imageName='${{ env.IMAGENAME }}' \
                       tag='${{ github.sha }}' \
                       registrySku='${{ env.REGISTRYSKU }}' \
                       sqlServerName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-sql' \
                       dbName='${{ env.APPNAME }}database' \
                       dbUserName='${{ secrets.DBUSERNAME }}' \
                       dbPassword='${{ secrets.DBPASSWORD }}' \
                       devEnv='${{ env.DEVENV }}'

    - name: Get ACR credentials
      id: getACRCred
      run: |
           echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
           echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
           echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`" 

    - name: 'Deploy to Azure Web App for Containers'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: '${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}'
        images: ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }} 

  testFunctional:
    name: Test - Functional tests
    runs-on: windows-latest
    environment: test
    env:
      ENVIRONMENTNAME: test
      SITE_URL: 'https://spacegamevnext-test.azurewebsites.net'
    needs: deployTest
    steps:
    - uses: actions/checkout@master
    - name: Run functional tests
      continue-on-error: false
      run: dotnet test FunctionalTests/FunctionalTests.csproj

  testLoad:
    name: Test - Load tests
    runs-on: ubuntu-latest
    environment: test
    env:
      ENVIRONMENTNAME: test
      SITE_URL: 'https://spacegamevnext-test.azurewebsites.net'
    needs: testFunctional
    steps:
    - uses: actions/checkout@master
    - name: Run load tests
      run: | 
        cd LoadTests
        wget -c ftp.ps.pl/pub/apache/jmeter/binaries/apache-jmeter-5.4.tgz
        tar -zxvf apache-jmeter-5.4.tgz         
        apache-jmeter-5.4/bin/./jmeter -n -t LoadTest.jmx -o Results.xml -Jhostname=${{ env.SITE_URL }}
        sudo apt-get update
        sudo apt-get install xsltproc
        xsltproc JMeter2JUnit.xsl Results.xml > JUnit.xml

    - name: Publish test Results
      uses: EnricoMi/publish-unit-test-result-action@v1.9
      if: success() || failure()
      with:
        github_token: ${{ secrets.GHTOKEN }}
        comment_title: Load Tests
        files: JUnit.xml
        comment_on_pr: false

  deployProd:
    name: Deploy - prod
    runs-on: ubuntu-latest
    environment: prod
    env:
      ENVIRONMENTNAME: prod
      DEVENV: false
    needs: testLoad
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy infrastructure
      run: >
        az deployment sub create \
          --name 'spacegamedeploy-${{ env.ENVIRONMENTNAME }}' \
          --location '${{ env.LOCATION }}' \
          --template-file IaC/main.bicep \
          --parameters resourceGroupName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-rg' \
                       acrResourceGroupName='${{ env.APPNAME }}-ACR-rg' \
                       appServiceName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}' \
                       servicePlanName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-plan' \
                       appSku='${{ env.SKU }}' \
                       registryName='${{ env.REGISTRYNAME }}' \
                       imageName='${{ env.IMAGENAME }}' \
                       tag='${{ github.sha }}' \
                       registrySku='${{ env.REGISTRYSKU }}' \
                       sqlServerName='${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-sql' \
                       dbName='${{ env.APPNAME }}database' \
                       dbUserName='${{ secrets.DBUSERNAME }}' \
                       dbPassword='${{ secrets.DBPASSWORD }}' \
                       devEnv='${{ env.DEVENV }}'

    - name: Get ACR credentials
      id: getACRCred
      run: |
           echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
           echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
           echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`" 

    - name: 'Deploy to Azure Web App for Containers'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: '${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}'
        images: ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}         