name: pipeline
on: [push]

env:
  APPNAME: spacegamevnext
  APPLICATIONPATH: Application
  IACPATH: IaC
  DOCKERFILEPATH: "Application/aspnet-core-dotnet-core"
  REGISTRYSKU: "Standard"
  REGISTRYNAME: "marcusfellingspacegamevnextacr"  
  LOCATION: West US
  SKU: B1 Basic
  RESOURCEGROUPNAME: spacegamevnext-dev-rg 
  HOSTINGPLAN: spacegamevnext-service-plan
  IMAGENAME: spacegamevnext
  SQLSERVERNAME: 'spacegamevnext-dev-sql'
  STORAGEACCOUNTNAME: 'spacegamevnextdbstoragedev'
  DBNAME: 'tailspindatabase'

jobs:
  build:
    name: Build and push application to ACR
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1 
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build app and run unit tests 
      run: | 
            pushd ${{ env.APPLICATIONPATH }}
            dotnet restore
            dotnet build --configuration Release
            dotnet test aspnet-core-dotnet-core.UnitTests/aspnet-core-dotnet-core.UnitTests.csproj  --verbosity normal
            popd

    # Generate ARM templates
    - name: Bicep build
      run: | 
        # Fetch the latest Bicep CLI binary
        curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
        # Mark it as executable
        chmod +x ./bicep
        # Add bicep to your PATH (requires admin)
        sudo mv ./bicep /usr/local/bin/bicep
        # Run Bicep build
        pushd ${{ env.IACPATH }}
        bicep build registry.bicep
        bicep build webapp-sql.bicep

    - name: Upload compiled arm templates 
      uses: actions/upload-artifact@v2
      with:
        name: IaC
        path: ./${{ env.IACPATH }}/webapp-sql.json 

    # Create Azure container registry
    - uses: azure/arm-deploy@v1
      id: createAcr
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./${{ env.IACPATH }}/registry.json
        parameters: registryName="${{ env.REGISTRYNAME }}" registryLocation="${{ env.LOCATION }}" registrySku="${{ env.REGISTRYSKU }}"

    - name: Fetch ACR credentials
      id: acrCredentials
      continue-on-error: false
      run: |
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"

    - name: ACR authentication
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRYNAME }}.azurecr.io
        username: ${{ steps.acrCredentials.outputs.acr_username }}
        password: ${{ steps.acrCredentials.outputs.acr_password }}

    - name: Docker Build & Push to ACR
      run: |
        docker login ${{ env.REGISTRYNAME }}.azurecr.io --username ${{ steps.acrCredentials.outputs.acr_username }} --password ${{ steps.acrCredentials.outputs.acr_password }}
        docker build "$GITHUB_WORKSPACE/${{env.DOCKERFILEPATH}}" -f  "${{env.DOCKERFILEPATH}}/Dockerfile" -t ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}  

  deploy:
    name: Deploy application Azure Web App for Containers
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: actions/download-artifact@v2
      with:
        name: IaC
        path: ${{ env.IACPATH }}

    - uses: azure/arm-deploy@v1
      id: deploy
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./${{ env.IACPATH }}/webapp-sql.json
        parameters: appServiceName="${{ env.APPNAME }}" servicePlanName="${{ env.HOSTINGPLAN }}" appSku="${{ env.SKU }}" registryName="${{ env.REGISTRYNAME }}" imageName="${{ env.IMAGENAME }}" registrySku="${{ env.REGISTRYSKU }}" sqlServerName="${{ env.SQLSERVERNAME }}" storageAccountName="${{ env.STORAGEACCOUNTNAME }} dbName="${{ env.DBNAME }}" dbUserName="${{ secrets.DBUSERNAME }}" dbPassword="${{ secrets.DBPASSWORD }}"
 
    - name: Get ACR credentials
      id: getACRCred
      run: |
           echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
           echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
           echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`" 

    - name: 'Deploy to Azure Web App for Containers'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.APPNAME }} 
        images: ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}

  FunctionalTests:
    name: Functional tests
    runs-on: windows-latest
    needs: deploy
    steps:
    - uses: actions/checkout@master

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Update web app url in Run Settings
      shell: powershell
      run: |
          cd Application\aspnet-core-dotnet-core.FunctionalTests
          [xml]$runSetting = Get-Content functionalTests.runsettings
          $runSetting.RunSettings.TestRunParameters.ChildNodes.Item(0).value = 'https://${{ env.APPNAME }}.azurewebsites.net/'
          $runSetting.Save("$(pwd)/functionalTests.runsettings")

    - name: Run tests
      continue-on-error: false
      run: |
          cd Application\aspnet-core-dotnet-core.FunctionalTests
          dotnet test aspnet-core-dotnet-core.FunctionalTests.csproj -s functionalTests.runsettings
