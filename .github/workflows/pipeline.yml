name: pipeline
on: [workflow_dispatch, push]
env:
  APPNAME: spacegamevnext # Name of app. Used for prefix in resource group, service plan, app service, container images, sql server and database.
  REGISTRYNAME: "marcusfellingspacegamevnextacr" # Registry that is shared across environments
  LOCATION: "WestUS" # Region for all Azure resources

jobs:

  testE2E:
    name: Run Playwright Tests
    runs-on: ubuntu-20.04
    container: mcr.microsoft.com/playwright:focal
    environment:
      name: test
      url: https://${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}.azurewebsites.net
    env:
      ENVIRONMENTNAME: test
      SITE_URL: https://spacegamevnext-test.azurewebsites.net # Playwright tests use this env var

    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Install dependencies
        run: npm ci     

      - name: Playwright Install
        continue-on-error: false
        run: |  
          npx playwright install --with-deps  

      - name: Run Playwright Tests        
        continue-on-error: false
        run: |   
          HOME=/root npx playwright test --config playwright.config.ts --reporter=html

      # Get url via steps.html_preview.outputs.url
      - name: HTML Preview
        if: always()
        id: html_preview
        uses: pavi2410/html-preview-action@v2
        with:
          html_file: 'playwright-report/index.html'

      - uses: actions/upload-artifact@v2
        name: Upload HTML report
        if: always()
        with:
          name: playwright-test-report
          path: playwright-report/index.html


      - uses: actions/upload-artifact@v2
        name: If failure, upload trace.zip to troubleshoot
        if: failure()
        with:
          name: playwright-test-trace
          path: test-results/  

  testLoad:
    name: Run load tests
    runs-on: ubuntu-20.04
    container: justb4/jmeter:5.3 # Use container with JMeter installed
    environment:
      name: test
      url: https://${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}.azurewebsites.net
    env:
      ENVIRONMENTNAME: test
      SITE_URL: https://spacegamevnext-test.azurewebsites.net # JMeter tests use this env var

    steps:
      - uses: actions/checkout@master

      - name: Run load tests
        run: |
          cd LoadTests        
          ${JMETER_HOME}/bin/./jmeter -n -t LoadTest.jmx -o Results.xml -Jhostname=${{ env.SITE_URL }}

  previewIaCProd:
    name: Preview IaC Changes
    runs-on: ubuntu-20.04
    env:
      ENVIRONMENTNAME: prod
      DEVENV: false
    needs: [testLoad, testE2E]
    steps:
      - uses: actions/checkout@master

      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Preview infrastructure changes (only show Create, Delete, Modify)
        run: >
          az deployment sub what-if --exclude-change-types Ignore NoChange \
            --name 'spacegamedeploy-${{ env.ENVIRONMENTNAME }}' \
            --location '${{ env.LOCATION }}' \
            --template-file IaC/main.bicep \
            --parameters appName='${{ env.APPNAME }}' \
                         environmentName=${{ env.ENVIRONMENTNAME }} \
                         registryName='${{ env.REGISTRYNAME }}' \
                         tag='${{ github.sha }}' \
                         dbUserName='${{ secrets.DBUSERNAME }}' \
                         dbPassword='${{ secrets.DBPASSWORD }}' \
                         devEnv='${{ env.DEVENV }}'

  deployProd:
    name: Deploy to Prod
    runs-on: ubuntu-20.04
    environment:
      name: prod
      url: https://${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}.azurewebsites.net
    env:
      ENVIRONMENTNAME: prod
      DEVENV: false
    needs: [previewIaCProd]
    steps:
      - uses: actions/checkout@master

      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy infrastructure
        run: >
          az deployment sub create \
            --name 'spacegamedeploy-${{ env.ENVIRONMENTNAME }}' \
            --location '${{ env.LOCATION }}' \
            --template-file IaC/main.bicep \
            --parameters appName='${{ env.APPNAME }}' \
                         environmentName=${{ env.ENVIRONMENTNAME }} \
                         registryName='${{ env.REGISTRYNAME }}' \
                         tag='${{ github.sha }}' \
                         dbUserName='${{ secrets.DBUSERNAME }}' \
                         dbPassword='${{ secrets.DBPASSWORD }}' \
                         devEnv='${{ env.DEVENV }}'
                         
      - uses: actions/download-artifact@v2
        name: Download dacpac from build
        with:
          name: dacpac

      - name: Deploy Database using dacpac
        uses: docker://markhobson/sqlpackage:latest # Use container with sqlpackage.exe
        with:
          args: /SourceFile:"Database.dacpac" /Action:Publish /TargetServerName:"${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-sql.database.windows.net" /TargetDatabaseName:"${{ env.APPNAME }}database" /TargetUser:"${{ secrets.DBUSERNAME }}" /TargetPassword:"${{ secrets.DBPASSWORD }}"

      - name: Get ACR credentials
        id: getACRCred
        run: |
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"

      - name: "Deploy to Azure Web App for Containers slot"
        uses: azure/webapps-deploy@v2
        with:
          app-name: "${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}"
          slot-name: "swap"
          images: ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.APPNAME }}:${{ github.sha }}

      - name: Swap slots for no downtime deploy
        run: |
          az webapp deployment slot swap -g '${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-rg' -n '${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}' --slot 'swap' --target-slot 'production'
