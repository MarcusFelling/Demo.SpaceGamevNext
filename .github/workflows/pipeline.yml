name: pipeline
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
env:
  APPNAME: spacegamevnext # Name of app. Used for prefix in resource group, service plan, app service, container images, sql server and database.
  REGISTRYNAME: "marcusfellingspacegamevnextacr" # Registry that is shared across environments
  LOCATION: "WestUS" # Region for all Azure resources

jobs:
  build-app:
    name: Build - App
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.1.0

      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build app and run unit tests
        run: |
          dotnet restore web-app/web-app.csproj
          dotnet restore unit-tests/unit-tests.csproj
          dotnet build web-app/web-app.csproj --configuration Release
          dotnet build unit-tests/unit-tests.csproj --configuration Release
          dotnet test unit-tests/unit-tests.csproj

      - name: Create Azure container registry using Bicep
        run: >
          az deployment group create \
            --resource-group '${{ env.APPNAME }}-ACR-rg' \
            --template-file iac/registry.bicep \
            --parameters registry='${{ env.REGISTRYNAME }}'

      - name: Fetch ACR credentials
        id: acrCredentials
        continue-on-error: false
        run: |
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"

      - name: ACR authentication
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRYNAME }}.azurecr.io
          username: ${{ steps.acrCredentials.outputs.acr_username }}
          password: ${{ steps.acrCredentials.outputs.acr_password }}

      - name: Docker Build & Push to ACR
        run: |
          docker login ${{ env.REGISTRYNAME }}.azurecr.io --username ${{ steps.acrCredentials.outputs.acr_username }} --password ${{ steps.acrCredentials.outputs.acr_password }}
          docker build "$GITHUB_WORKSPACE" -f  "Dockerfile" -t ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.APPNAME }}:${{ github.sha }} 
          docker push ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.APPNAME }}:${{ github.sha }}

  build-database:
    name: Build - Database
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v3.1.0

      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1

      - name: Use MSBuild to build db project
        run: MSBuild.exe database/database.sqlproj

      - name: Copy dacpac before artifact Upload
        run: Copy-Item "database/bin/Debug/database.dacpac" -Destination "database.dacpac"

      - name: Upload dacpac as artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: dacpac
          path: database.dacpac

  build-iac:
    name: Build - Infrastructure
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.1.0

      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate Bicep templates to ensure transpilation, linting, and preflight are successful
        working-directory: iac
        env:
          ENVIRONMENTNAME: dev
          DEVENV: true
        run: |
          az deployment sub validate \
            --name 'spacegamedeploy-${{ env.ENVIRONMENTNAME }}' \
            --location '${{ env.LOCATION }}' \
            --template-file main.bicep \
            --parameters appName='${{ env.APPNAME }}' \
                         environmentName=${{ env.ENVIRONMENTNAME }} \
                         registryName='${{ env.REGISTRYNAME }}' \
                         tag='${{ github.sha }}' \
                         dbUserName='${{ secrets.DBUSERNAME }}' \
                         dbPassword='${{ secrets.DBPASSWORD }}' \
                         devEnv='${{ env.DEVENV }}'

  deploy-dev:
    name: Deploy to Dev
    environment:
      name: dev
      url: https://${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-${{ env.GITHUB_REF_NAME }}.azurewebsites.net
    concurrency:
      group: dev
      cancel-in-progress: true
    env:
      ENVIRONMENTNAME: dev
      DEVENV: true
    needs: [build-app, build-database, build-iac]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.1.0

      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy infrastructure
        run: >
          az deployment sub create \
            --name 'spacegamedeploy-${{ env.ENVIRONMENTNAME }}' \
            --location '${{ env.LOCATION }}' \
            --template-file iac/main.bicep \
            --parameters appName='${{ env.APPNAME }}' \
                         environmentName=${{ env.ENVIRONMENTNAME }} \
                         branchName='-${{ env.GITHUB_REF_NAME }}' \
                         registryName='${{ env.REGISTRYNAME }}' \
                         tag='${{ github.sha }}' \
                         dbUserName='${{ secrets.DBUSERNAME }}' \
                         dbPassword='${{ secrets.DBPASSWORD }}' \
                         devEnv='${{ env.DEVENV }}'

      - uses: actions/download-artifact@v3.0.1
        name: download dacpac from build
        with:
          name: dacpac

      - name: Deploy Database using dacpac
        uses: docker://markhobson/sqlpackage:latest # Use container with sqlpackage.exe
        with:
          args: /SourceFile:"database.dacpac" /Action:Publish /TargetServerName:"${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-sql.database.windows.net" /TargetDatabaseName:"${{ env.APPNAME }}database" /TargetUser:"${{ secrets.DBUSERNAME }}" /TargetPassword:"${{ secrets.DBPASSWORD }}"

      - name: Get ACR credentials
        id: getACRCred
        run: |
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"

      - name: "Deploy to Azure Web App for Containers"
        uses: azure/webapps-deploy@v2
        with:
          app-name: "${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-${{ env.GITHUB_REF_NAME }}"
          images: ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.APPNAME }}:${{ github.sha }}

  deploy-test:
    name: Deploy to Test
    runs-on: ubuntu-22.04
    environment:
      name: test
      url: https://${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}.azurewebsites.net
    concurrency:
      group: test
      cancel-in-progress: true
    env:
      ENVIRONMENTNAME: test
      DEVENV: false
    needs: [deploy-dev]
    steps:
      - uses: actions/checkout@v3.1.0

      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy infrastructure
        run: >
          az deployment sub create \
            --name 'spacegamedeploy-${{ env.ENVIRONMENTNAME }}' \
            --location '${{ env.LOCATION }}' \
            --template-file iac/main.bicep \
            --parameters appName='${{ env.APPNAME }}' \
                         environmentName=${{ env.ENVIRONMENTNAME }} \
                         registryName='${{ env.REGISTRYNAME }}' \
                         tag='${{ github.sha }}' \
                         dbUserName='${{ secrets.DBUSERNAME }}' \
                         dbPassword='${{ secrets.DBPASSWORD }}' \
                         devEnv='${{ env.DEVENV }}'

      - uses: actions/download-artifact@v3.0.1
        name: Download dacpac from build
        with:
          name: dacpac

      - name: Deploy Database using dacpac
        uses: docker://markhobson/sqlpackage:latest # Use container with sqlpackage.exe
        with:
          args: /SourceFile:"database.dacpac" /Action:Publish /TargetServerName:"${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-sql.database.windows.net" /TargetDatabaseName:"${{ env.APPNAME }}database" /TargetUser:"${{ secrets.DBUSERNAME }}" /TargetPassword:"${{ secrets.DBPASSWORD }}"

      - name: Get ACR credentials
        id: getACRCred
        run: |
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"

      - name: "Deploy to Azure Web App for Containers slot"
        uses: azure/webapps-deploy@v2
        with:
          app-name: "${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}"
          slot-name: "swap"
          images: ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.APPNAME }}:${{ github.sha }}

      - name: Swap slots for no downtime deploy
        run: |
          az webapp deployment slot swap -g '${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-rg' -n '${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}' --slot 'swap' --target-slot 'production'

  test-e2e:
    name: Run E2E Tests
    runs-on: ubuntu-22.04
    container: mcr.microsoft.com/playwright:v1.27.0-focal
    environment:
      name: test
      url: https://${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}.azurewebsites.net
    concurrency:
      group: test
      cancel-in-progress: true
    env:
      ENVIRONMENTNAME: test-e2e
      BASEURL: https://spacegamevnext-test.azurewebsites.net # Playwright tests use this env var
    defaults:
      run:
        working-directory: e2e-tests
    needs: [deploy-test]
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: actions/setup-node@v3.5.1
        with:
          node-version: "14.x"

      - name: Install dependencies
        run: npm ci

      - name: Run Playwright Tests
        continue-on-error: false
        run: |
          HOME=/root npx playwright test

      - name: Create test summary
        uses: test-summary/action@v2.0
        if: always()
        with:
          paths: e2e-tests/results/junit.xml

      - uses: actions/upload-artifact@v3.1.1
        name: Upload HTML report
        if: always()
        with:
          name: e2e-tests-report
          path: e2e-tests/results/html

  test-load:
    name: Run Load Tests
    runs-on: ubuntu-22.04
    environment:
      name: test-load
      url: https://${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}.azurewebsites.net
    concurrency:
      group: test-load
      cancel-in-progress: true
    env:
      ENVIRONMENTNAME: test
    needs: [deploy-test, test-e2e]
    steps:
      - uses: actions/checkout@v3.1.0

      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Azure Load Testing - Home Page Test"
        uses: azure/load-testing@v1
        with:
          loadTestConfigFile: "load-tests/home-page.yaml"
          loadTestResource: ${{ env.APPNAME }}-loadtest
          resourceGroup: ${{ env.APPNAME }}-loadtest-rg
          env: |
            [
                {
                "name": "HOMEPAGE_URL",
                "value": "spacegamevnext-test.azurewebsites.net"
                }
            ]

  deploy-prod:
    name: Deploy to Prod
    runs-on: ubuntu-22.04
    environment:
      name: prod
      url: https://${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}.azurewebsites.net
    concurrency:
      group: prod
      cancel-in-progress: true
    env:
      ENVIRONMENTNAME: prod
      DEVENV: false
    needs: [deploy-test, test-load, test-e2e]
    steps:
      - uses: actions/checkout@v3.1.0

      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy infrastructure
        run: >
          az deployment sub create \
            --name 'spacegamedeploy-${{ env.ENVIRONMENTNAME }}' \
            --location '${{ env.LOCATION }}' \
            --template-file iac/main.bicep \
            --parameters appName='${{ env.APPNAME }}' \
                         environmentName=${{ env.ENVIRONMENTNAME }} \
                         registryName='${{ env.REGISTRYNAME }}' \
                         tag='${{ github.sha }}' \
                         dbUserName='${{ secrets.DBUSERNAME }}' \
                         dbPassword='${{ secrets.DBPASSWORD }}' \
                         devEnv='${{ env.DEVENV }}'

      - uses: actions/download-artifact@v3.0.1
        name: Download dacpac from build
        with:
          name: dacpac

      - name: Deploy Database using dacpac
        uses: docker://markhobson/sqlpackage:latest # Use container with sqlpackage.exe
        with:
          args: /SourceFile:"database.dacpac" /Action:Publish /TargetServerName:"${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-sql.database.windows.net" /TargetDatabaseName:"${{ env.APPNAME }}database" /TargetUser:"${{ secrets.DBUSERNAME }}" /TargetPassword:"${{ secrets.DBPASSWORD }}"

      - name: Get ACR credentials
        id: getACRCred
        run: |
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"

      - name: "Deploy to Azure Web App for Containers slot"
        uses: azure/webapps-deploy@v2
        with:
          app-name: "${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}"
          slot-name: "swap"
          images: ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.APPNAME }}:${{ github.sha }}

      - name: Swap slots for no downtime deploy
        run: |
          az webapp deployment slot swap -g '${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}-rg' -n '${{ env.APPNAME }}-${{ env.ENVIRONMENTNAME }}' --slot 'swap' --target-slot 'production'
